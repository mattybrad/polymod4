Pins for PCB prototype 1.
Pins in round brackets are required by audio board.

0       MIDI input (6N138)
1       MIDI output (maybe) or 4051 #5
2       Patching 595 data
3       Patching 595 clock
4       Patching 595 latch
5       Utility 595 data
6       Utility 595 clock
7       (Audio data)
8       (Audio data)
9       Patching 165 load
10      Patching 165 clock
11      Patching 165 clock enable
12      Patching 165 data

13      Basic LED
14  A0  4051 #1
15  A1  4051 #2
16  A2  4051 #3
17  A3  4051 #4
18  A4  (Audio control)
19  A5  (Audio control)
20  A6  (Audio data)
21  A7  (Audio data)
22  A8  Utility 595 latch
23  A9  (Audio data)

This design doesn't make optimal use of all the pins, but is a good compromise to make coding a bit easier. I'm using two separate chains of 595s so that patching (which is already complex) doesn't get any harder. LEDs are driven by 595s, which is not ideal but just makes things easy rather than learning about LED driver ICs just for a prototype. Tactile buttons are running through a 5th 4051 because I'm already addressing the 4051 group so it means I don't have to add more 165s. 4051s are addressed by the 595s because of lack of pins. One pin was spare, hence using pin 13 as LED for debugging etc.

A more optimal design might be something like:

0       MIDI input (6N138)
1       LED driver?
2       595 data
3       595 clock
4       595 latch
5       LED driver?
6       LED driver?
7       (Audio data)
8       (Audio data)
9       165 load
10      165 clock
11      165 clock enable
12      165 data

13      LED driver?
14  A0  4051 #1
15  A1  4051 #2
16  A2  4051 #3
17  A3  4051 #4
18  A4  (Audio control)
19  A5  (Audio control)
20  A6  (Audio data)
21  A7  (Audio data)
22  A8  LED driver?
23  A9  (Audio data)

To drive LEDs and an OLED display, we could either route the 4051 outputs into an extra 4051, or just switch to Teensy 4.1. Other future considerations include CV in/out and SD card stuff.

PROBABLY ALLOW 4.1 TO BE CONNECTED TO PCB IF BOTH ARE INTERACHANGEABLE